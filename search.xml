<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>3层架构</title>
      <link href="/2020/02/20/Architecture/"/>
      <url>/2020/02/20/Architecture/</url>
      
        <content type="html"><![CDATA[<h3 id="概念：根据功能不同，把所有内容分成3个模块"><a href="#概念：根据功能不同，把所有内容分成3个模块" class="headerlink" title="概念：根据功能不同，把所有内容分成3个模块"></a>概念：根据功能不同，把所有内容分成3个模块</h3><pre><code>1.界面层(User Interface layer)：放所有关于界面的功能的类2.逻辑层( Business Logic Layer )：格局业务逻辑，拿到的数据不呢个直接使用，需要进行到dao层处理3.数据层( Data access layer )：存储数据，获取真实对数据操作</code></pre><p>​        //层与层之间传递参数以及返回数据都是使用对象调用方法</p><p><img src="/.com//C:%5CWindows%5CSystem32%5Cmyblog%5Csource_posts%5Carchitecture%5C3%E5%B1%82%E6%9E%B6%E6%9E%84.jpg" alt="picture"></p>]]></content>
      
      
      <categories>
          
          <category> java学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Polymorphism(多态)</title>
      <link href="/2020/02/20/Polymorphism/"/>
      <url>/2020/02/20/Polymorphism/</url>
      
        <content type="html"><![CDATA[<h4 id="1-多态的语法：有继承和实现的时候（条件）"><a href="#1-多态的语法：有继承和实现的时候（条件）" class="headerlink" title="1.多态的语法：有继承和实现的时候（条件）"></a>1.多态的语法：有继承和实现的时候（条件）</h4><p>   重写方法</p><p>   父类的引用</p><p> //编译过程中不确定具体类型，等待运行后在确定具体类，根据运行是的类型来确定</p><h4 id="2-多态就是引用数据类型的一种自动类型转换，向上转型（子类的对象指向父类的引用）"><a href="#2-多态就是引用数据类型的一种自动类型转换，向上转型（子类的对象指向父类的引用）" class="headerlink" title="2.多态就是引用数据类型的一种自动类型转换，向上转型（子类的对象指向父类的引用）"></a>2.多态就是引用数据类型的一种自动类型转换，向上转型（子类的对象指向父类的引用）</h4><p>例如： Animals am = new Dog();    </p><p>a.多态的情况下，不能调用子类独有的方法（比如子类Dog独有的方法）</p><p>b.多态的情况下，如果子类方法重写了父类的方法，则调用的是子类重写的方法</p><p>c.多态的情况下，调用的只能是父类的属性</p><h4 id="3-多态的作用："><a href="#3-多态的作用：" class="headerlink" title="3.多态的作用："></a>3.多态的作用：</h4><p>a.作为返回值</p><p>b.作为参数</p><h3 id="拓展："><a href="#拓展：" class="headerlink" title="拓展："></a><strong>拓展：</strong></h3><h4 id="内部类：写在类中，或者方法中的类"><a href="#内部类：写在类中，或者方法中的类" class="headerlink" title="内部类：写在类中，或者方法中的类"></a>内部类：写在类中，或者方法中的类</h4><p>1.成员内部类： 把类当作成员，可以使用所有权限修饰符</p><p>可以定义一个比private更小的范围，可以实现一个外部</p><p>类继承1个内部类和继承1个类</p><p>但是不能定义静态属性和方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">a</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">b</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">​    <span class="comment">// c()  ; //错误调用</span></span><br><span class="line"></span><br><span class="line">​     <span class="keyword">new</span> InnerClass().c();  <span class="comment">//正确方法</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">InnerClass</span></span>&#123;<span class="comment">//属于对象</span></span><br><span class="line"></span><br><span class="line">​       b（）；</span><br><span class="line"></span><br><span class="line">​      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">c</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">​    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.静态内部类 ：可以定义静态属性</p><p>3.方法内部类： 也叫匿名内部类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">B</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">eat</span><span class="params">(String food)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//语法一</span></span><br><span class="line"><span class="comment">//B b = new B() &#123;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//@Override</span></span><br><span class="line"><span class="comment">//public void eat(String food) &#123;</span></span><br><span class="line"><span class="comment">//// TODO Auto-generated method stub</span></span><br><span class="line"><span class="comment">//System.out.println("吃"+food);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//&#125;;</span></span><br><span class="line"><span class="comment">//b.eat("肉");</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//语法二</span></span><br><span class="line">B b2 = (String food)-&gt;&#123;</span><br><span class="line">System.out.println(<span class="string">"吃"</span>+food);</span><br><span class="line">&#125;;</span><br><span class="line">b2.eat(<span class="string">"菜"</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Interface(接口)</title>
      <link href="/2020/02/20/Interface/"/>
      <url>/2020/02/20/Interface/</url>
      
        <content type="html"><![CDATA[<p><strong>1.定义</strong></p><p>a.接口中只能定义常量和抽象方法，不能定义变量—-自动加上public static final </p><p>b.可以定义static修饰的普通方法，不能定义非静态（非static）的普通方法</p><p>​    例如  static void c(){}(会自动加上public)      例如  public void c(){}</p><p>c.可以定义抽象方法—–会自动加上public abstract 例如  void b(){}</p><p>d.不能定义构造方法，不能创建对象</p><p>​    接口的子类和子口的关系叫做实现    implements</p><p>​    子类实现接口的抽象方法，会具有接口的常量和抽象方法</p><p>​    但是子类不会继承父类（接口）的static修饰的普通方法</p><p>​    需要通过接口名.方法名（）访问</p><h5 id="接口的多实现，接口和接口之间可以多继承"><a href="#接口的多实现，接口和接口之间可以多继承" class="headerlink" title="接口的多实现，接口和接口之间可以多继承"></a><em>接口的多实现，接口和接口之间可以多继承</em></h5>]]></content>
      
      
      <categories>
          
          <category> java学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Abstract(抽象)</title>
      <link href="/2020/02/19/Abstract/"/>
      <url>/2020/02/19/Abstract/</url>
      
        <content type="html"><![CDATA[<p>1.使用abstract修饰的类，写出来就是为了被继承，（不可以使用final修饰）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animals</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>2.不能创建对象（创建对象没有意义，是一个不完整的规范）</p><p>3.在抽象类中可以定义普通类中定义的所有（变量，常量，方法，构造方法）</p><p>4.抽象方法没有方法体，加上abstract 修饰方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> b（）&#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a><strong>关键字</strong></h3><p>final：修饰的变量是常量，只能赋值一次</p><p>​           如果修饰的是方法，则该方法不能被重写</p><pre><code>如果修饰的是类，则该类不能被继承（不能和abstract共用）*final修饰的类有：String，Math  ；属性有：PI*</code></pre><p>finalized：这是个垃圾回收的方法，一般不会手动调用，jvm（虚拟机）自动调用，</p><p>会在垃圾回收之前自动调用</p><p>finally：这个是异常处理中的</p><h3 id="static：静态"><a href="#static：静态" class="headerlink" title="static：静态"></a><strong>static</strong>：静态</h3><p>//static修饰属性和方法：static修饰的都是属于类的，整个类都只有一份，根据类创建的对象也只有这一份，如果没有static修饰的变量每次创建新对象都会各自有一份</p><p>//static修饰的是在第一次使用类的时候，进行加载，整个类中只加载1次</p><p>static修饰的方法不能被重写</p><p>//static修饰的是类，在第一次使用类的时候加载，第一次使用类的时候可能 </p><p> 还没有对象（Student a；）所以在static 修饰的方法中，不能直接调用非static的方法和属性</p><p>   因为这个时候还没创建对象 new Student().方法名();如果想要调用</p><p>   则需要创建一个对象也不能有this，this指的是对象</p><p>//非static修饰的是对象的，有对象的时候肯定已经使用了类，加载过static修饰    new Student();</p><p><strong>在非静态类中，可以调用静态的方法属性</strong></p><p>两种访问方式：</p><p>a.创建对象访问</p><p>b.类名.方法 / 类名.属性</p>]]></content>
      
      
      <categories>
          
          <category> java学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Encapsulation(封装)</title>
      <link href="/2020/02/19/Encapsulation/"/>
      <url>/2020/02/19/Encapsulation/</url>
      
        <content type="html"><![CDATA[<h4 id="在Java总封装提供了四个权限修饰符："><a href="#在Java总封装提供了四个权限修饰符：" class="headerlink" title="在Java总封装提供了四个权限修饰符："></a>在Java总封装提供了四个权限修饰符：</h4><p>public：公共的—整个项目中所有的都可以访问（项目可见性）</p><p>protected：受保护的—当前包以及其他包的子类</p><p>default：默认的–当前包（包可见性）</p><p>private：私有的–当前类（类可见性）</p><h4 id="为什么需要封装？"><a href="#为什么需要封装？" class="headerlink" title="为什么需要封装？"></a>为什么需要封装？</h4><p>a.方便访问</p><p>b.数据安全性</p><p>​                    public          protected            default        private</p><p>类                   *                                              *</p><p>属性               *                     *                        *                 *</p><p>方法               *                     *                        *                 *</p><p>//如果类是被public修饰的，那么构造方法也是被public修饰</p><p>//构造方法不是所有的都是被public修饰的，他根据类来决定</p><p>//使用私有封装属性是最常用的，因为以防数据不合理和数据不安全</p><p>//给私有属性提供setter和getter方法</p><p>格式 set+属性名（首字母大写） get+属性名（首字母大写） </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age ;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.age = age ;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getAge</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> age ;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="this的作用-："><a href="#this的作用-：" class="headerlink" title="this的作用 ："></a>this的作用 ：</h4><p>a.访问方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">a</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">b</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.a();<span class="comment">//访问当前类中的其他方法</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>b.访问属性</p><p>当成员变量和局部变量同名时，用this.xx代表成员变量</p><p>c.访问构造方法</p><p>this.(值)—表示调用当前类中的构造方法（只能写在第一行）</p>]]></content>
      
      
      <categories>
          
          <category> java学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Extends(继承)</title>
      <link href="/2020/02/19/Extends/"/>
      <url>/2020/02/19/Extends/</url>
      
        <content type="html"><![CDATA[<p>extends —继承父类非私有的属性和方法</p><p><em>注意点：不能多继承，但是可以多层次继承</em></p><p><strong>super</strong>—指的是父类本身</p><p>a.访问方法：访问当前父类中的方法，使用super.方法();</p><p>b.访问属性：访问当前父类中的属性，super.属性</p><p>c.访问构造方法：调用父类的构造方法，只能写在第一行，super(值)</p><p><em>重写：当父类的方法不满足子类的需求的时候需要重写，只改变方法体</em></p><p>​    <em>（此处区分重载和重写的区别）</em></p><h3 id="toString方法："><a href="#toString方法：" class="headerlink" title="toString方法："></a>toString方法：</h3><p>//toString —在输出对象的时候自动调用，所有的类都有这个toString，toString的方法是object</p><p>//object的toString是输出这个对象的地址，如果我们不想输出地址，就重写</p><p>//@Override //表示这个方法是重写</p><p>​    </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;<span class="comment">//生成一个重写的toString --输出所有的属性</span></span><br><span class="line"></span><br><span class="line">​<span class="keyword">return</span> <span class="string">"Workers [name="</span> + name + <span class="string">", sex="</span> + sex + <span class="string">", age="</span> + age + <span class="string">"]"</span>;</span><br><span class="line"></span><br><span class="line">​&#125;</span><br></pre></td></tr></table></figure><h3 id="equals方法："><a href="#equals方法：" class="headerlink" title="equals方法："></a>equals方法：</h3><p>//object的方法，用于比较，原生方法为==</p><p>//基本类型用==比较时，比较的是值；而引用类型比较的是地址；</p><p>//重写equals用于判断两个属性是否相等</p><p>//jdk提供的类，几乎都是重写了equals，这些重写的equals都是比较的值</p>]]></content>
      
      
      <categories>
          
          <category> java学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Class(类)</title>
      <link href="/2020/02/19/Class/"/>
      <url>/2020/02/19/Class/</url>
      
        <content type="html"><![CDATA[<h3 id="1-定义类的语法"><a href="#1-定义类的语法" class="headerlink" title="1.定义类的语法"></a><strong>1.定义类的语法</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 类名｛</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">//<span class="title">a</span>.属性</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">//<span class="title">b</span>.函数，方法</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">｝</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">//举例</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">Dog</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">​<span class="comment">//属性----成员变量（有默认值）</span></span><br><span class="line"></span><br><span class="line">String color;</span><br><span class="line"></span><br><span class="line">String name;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">String type;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">(String food)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">​System.out.println(<span class="string">"狗狗在吃："</span>+food);</span><br><span class="line"></span><br><span class="line">&#125;<span class="comment">//加上static 和不加只是调用不同，暂时不加</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shout</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">​System.out.println(type+<span class="string">"的狗在大叫"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">introduce</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">​System.out.println(<span class="string">"这只泰迪"</span>+age+<span class="string">"岁了"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-定义对象的语法"><a href="#2-定义对象的语法" class="headerlink" title="2.定义对象的语法"></a><strong>2.定义对象的语法</strong></h3><pre><code>类名 变量名 = new 类名（）；</code></pre><p>​    访问属性：对象名.属性名；</p><p>​    访问方法：对象名.方法名；</p><h3 id="3-类和对象在内存中的分析"><a href="#3-类和对象在内存中的分析" class="headerlink" title="3.类和对象在内存中的分析"></a><strong>3.类和对象在内存中的分析</strong></h3><h3 id="4-构造方法"><a href="#4-构造方法" class="headerlink" title="4.构造方法"></a><strong>4.构造方法</strong></h3><p>​        每一个类中都有一个默认的隐藏的构造方法（没有参数）</p><p>​        但是当我们写了有参数的构造方法之后，无参数的构造方法就没了，需要手动添加.              </p><p>​        构造方法的作用：</p><h4 id="a-用来创建对象-new-构造方法（构造器）"><a href="#a-用来创建对象-new-构造方法（构造器）" class="headerlink" title="a.用来创建对象 new+构造方法（构造器）"></a>a.用来创建对象 new+构造方法（构造器）</h4><h4 id="b-初始化成员变量"><a href="#b-初始化成员变量" class="headerlink" title="b.初始化成员变量"></a>b.初始化成员变量</h4><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Dog</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">​System.out.println(<span class="string">"构造方法"</span>);</span><br><span class="line"></span><br><span class="line">​&#125;</span><br><span class="line"></span><br><span class="line">​<span class="comment">//有参构造给成员变量赋值</span></span><br><span class="line"></span><br><span class="line">​<span class="function"><span class="keyword">public</span> <span class="title">Dog</span><span class="params">(String name,String color,<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">​<span class="keyword">this</span>.name = name ;</span><br><span class="line"></span><br><span class="line">​<span class="keyword">this</span>.color = color;</span><br><span class="line"></span><br><span class="line">​<span class="keyword">this</span>.age = age ;</span><br><span class="line"></span><br><span class="line">​&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Array(数组)</title>
      <link href="/2020/02/19/Array/"/>
      <url>/2020/02/19/Array/</url>
      
        <content type="html"><![CDATA[<h3 id="1-特点："><a href="#1-特点：" class="headerlink" title="1.特点："></a><strong>1.特点：</strong></h3><pre><code>a.数组一旦被定义，大小不可改变（java特性，长度一开始就定义好了）b.数组是引用数据类型，但是数组可以被定义成存储任意类型8个基本类型 c.数组中的数据类型必须是一致的，和定义的类型一致数组在创建时就一定要声明类型，然后数组就只能存储这个类            型d.数组有默认值，默认是就是定义类型的默认值     byte short int ---0     long--0L     float double ---0.0     char---\u000     String----nulle.数组有顺序，以下标定义 从0-length-1    </code></pre><h3 id="2-声明"><a href="#2-声明" class="headerlink" title="2.声明"></a><strong>2.声明</strong></h3><h3 id="a-动态赋值"><a href="#a-动态赋值" class="headerlink" title="a.动态赋值"></a>a.动态赋值</h3><p>​        通过下标赋值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> [] arr;</span><br></pre></td></tr></table></figure><p>​        //声明一个变量这个变量是数组类型的，名字都叫做arr</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</span><br></pre></td></tr></table></figure><p>​        //给开辟一个空间，大小为3，没有值，把这个空间赋值给变量arr</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> [] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">arr[<span class="number">0</span>] = <span class="number">12</span>;</span><br></pre></td></tr></table></figure><p>​    b.静态初始化</p><p>​    c.默认初始化</p><h3 id="3-操作"><a href="#3-操作" class="headerlink" title="3.操作"></a><strong>3.操作</strong></h3><p>​    a.冒泡排序：比较相邻的两个数</p><p>​    b.增删改</p><p>​        增：先进行数组扩容</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">​<span class="keyword">int</span> [] arr1 = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>&#125;;</span><br><span class="line"></span><br><span class="line">​add(arr1,<span class="number">3</span>,<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">​&#125;</span><br><span class="line"></span><br><span class="line">​<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> [] arr,<span class="keyword">int</span> index,<span class="keyword">int</span> a)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">​<span class="keyword">int</span> [] arr2 = <span class="keyword">new</span> <span class="keyword">int</span>[arr.length+<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">​<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;arr.length;i++) &#123;</span><br><span class="line"></span><br><span class="line">​arr2[i] = arr[i];</span><br><span class="line"></span><br><span class="line">​</span><br><span class="line"></span><br><span class="line">​&#125;</span><br><span class="line"></span><br><span class="line">​arr = arr2;</span><br><span class="line"></span><br><span class="line">​<span class="keyword">if</span>(index&gt;=arr.length) &#123;</span><br><span class="line"></span><br><span class="line">​System.out.println(<span class="string">"下标越界"</span>);</span><br><span class="line"></span><br><span class="line">​&#125;</span><br><span class="line"></span><br><span class="line">​<span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">​<span class="keyword">for</span>(<span class="keyword">int</span> i=arr.length-<span class="number">1</span>;i&gt;=index;i--) &#123;</span><br><span class="line"></span><br><span class="line">​arr[i] = arr[i-<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">​&#125;</span><br><span class="line"></span><br><span class="line">​arr[index] = a;</span><br><span class="line"></span><br><span class="line">​System.out.println(Arrays.toString(arr));</span><br><span class="line"></span><br><span class="line">​&#125;</span><br><span class="line"></span><br><span class="line">​&#125;</span><br></pre></td></tr></table></figure><p>​    c.查询</p><p>​        forEach</p><p>​        格式：for（数据类型 变量名：数组）{}</p><h3 id="4-二维数组"><a href="#4-二维数组" class="headerlink" title="4.二维数组"></a><strong>4.二维数组</strong></h3><p>​    a.动态初始化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> [][] arr = <span class="keyword">new</span> <span class="keyword">int</span> [][];</span><br></pre></td></tr></table></figure><p>​    b.静态赋值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[][] arr = &#123;</span><br><span class="line"></span><br><span class="line">｛<span class="number">1</span>，<span class="number">2</span>，<span class="number">3</span>｝，</span><br><span class="line"></span><br><span class="line">｛<span class="number">4</span>，<span class="number">5</span>，<span class="number">6</span>｝</span><br><span class="line"></span><br><span class="line">｝</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
